/*
 * Clase que alojará el panel de BD y todas las funciones de los botones de la vista
 */
package bd;

import bd.controllers.bdcontrol;
import bd.models.ExcepString;
import bd.models.basedatos;
import bd.models.campo;
import bd.models.tabla;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pablo Pardo y Ángel Valera
 */
public class bdPanel extends javax.swing.JPanel {

    public String tablasel;
    bdcontrol c = new bdcontrol();
    public String ruta = "";
    private boolean modificar = false;
    ArrayList<campo> campos = new ArrayList();
    private int rowsel, colsel;

    /**
     * Creates new form bdPanel
     */
    public bdPanel() {
        initComponents();
        this.btnBorrarCampo.setVisible(false);
        this.jLabel10.setVisible(false);
        this.CheckUnico.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CrearBD = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        NombreNuevaBase = new javax.swing.JTextField();
        btnCrearBase = new javax.swing.JButton();
        btnCancelarNuevaBase = new javax.swing.JButton();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        Modificar = new javax.swing.JMenuItem();
        Borrar = new javax.swing.JMenuItem();
        renombrarTabla = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        NombreNuevaTabla1 = new javax.swing.JTextField();
        btnRenombrarTabla = new javax.swing.JButton();
        btnCancelarRenombrarTabla = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaTablas = new javax.swing.JList();
        NombreNuevaTabla = new javax.swing.JTextField();
        NuevaTabla = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Datos = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaDatos = new javax.swing.JTable();
        btnAnyadir = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtbuscar = new javax.swing.JTextField();
        LabelNombreTabla = new javax.swing.JLabel();
        Estructura = new javax.swing.JPanel();
        ListaCampos = new javax.swing.JList();
        BtNuevoCampo = new javax.swing.JButton();
        PanelNuevoCampo = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TxtNombreCampo = new javax.swing.JTextField();
        ComboTipoCampo = new javax.swing.JComboBox();
        CheckCP = new javax.swing.JCheckBox();
        CheckUnico = new javax.swing.JCheckBox();
        CheckNulo = new javax.swing.JCheckBox();
        BtAnyadirCampo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        CheckModificar = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        btnBorrarCampo = new javax.swing.JButton();

        CrearBD.setTitle("Crear Base Datos");
        CrearBD.setMinimumSize(new java.awt.Dimension(326, 100));
        CrearBD.setModal(true);

        jLabel1.setText("Nombre Base Datos");

        btnCrearBase.setText("Crear");
        btnCrearBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearBaseActionPerformed(evt);
            }
        });

        btnCancelarNuevaBase.setText("Cancelar");
        btnCancelarNuevaBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarNuevaBaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CrearBDLayout = new javax.swing.GroupLayout(CrearBD.getContentPane());
        CrearBD.getContentPane().setLayout(CrearBDLayout);
        CrearBDLayout.setHorizontalGroup(
            CrearBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CrearBDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CrearBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(CrearBDLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancelarNuevaBase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCrearBase))
                    .addGroup(CrearBDLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NombreNuevaBase, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                .addContainerGap())
        );
        CrearBDLayout.setVerticalGroup(
            CrearBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CrearBDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CrearBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(NombreNuevaBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CrearBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarNuevaBase)
                    .addComponent(btnCrearBase))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Modificar.setText("Renombrar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Modificar);

        Borrar.setText("Borrar");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Borrar);

        renombrarTabla.setTitle("Renombrar Tabla");
        renombrarTabla.setMinimumSize(new java.awt.Dimension(326, 100));
        renombrarTabla.setModal(true);

        jLabel9.setText("Nuevo Nombre Tabla");

        btnRenombrarTabla.setText("Renombrar");
        btnRenombrarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenombrarTablaActionPerformed(evt);
            }
        });

        btnCancelarRenombrarTabla.setText("Cancelar");
        btnCancelarRenombrarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarRenombrarTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout renombrarTablaLayout = new javax.swing.GroupLayout(renombrarTabla.getContentPane());
        renombrarTabla.getContentPane().setLayout(renombrarTablaLayout);
        renombrarTablaLayout.setHorizontalGroup(
            renombrarTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(renombrarTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(renombrarTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(renombrarTablaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancelarRenombrarTabla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRenombrarTabla))
                    .addGroup(renombrarTablaLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NombreNuevaTabla1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                .addContainerGap())
        );
        renombrarTablaLayout.setVerticalGroup(
            renombrarTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(renombrarTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(renombrarTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(NombreNuevaTabla1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(renombrarTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarRenombrarTabla)
                    .addComponent(btnRenombrarTabla))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ListaTablas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ListaTablas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListaTablas.setInheritsPopupMenu(true);
        ListaTablas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaTablasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListaTablas);

        NombreNuevaTabla.setToolTipText("Nombre nueva tabla");

        NuevaTabla.setLabel("NuevaTabla");
        NuevaTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevaTablaActionPerformed(evt);
            }
        });

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TablaDatos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        TablaDatos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TablaDatos.setColumnSelectionAllowed(true);
        TablaDatos.setEditingRow(1);
        TablaDatos.setMaximumSize(new java.awt.Dimension(200, 64));
        TablaDatos.setSelectionBackground(new java.awt.Color(223, 45, 47));
        TablaDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaDatosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TablaDatos);

        btnAnyadir.setText("Añadir");
        btnAnyadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnyadirActionPerformed(evt);
            }
        });

        btnUpdate.setText("Modificar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DatosLayout = new javax.swing.GroupLayout(Datos);
        Datos.setLayout(DatosLayout);
        DatosLayout.setHorizontalGroup(
            DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DatosLayout.createSequentialGroup()
                .addGroup(DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(DatosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DatosLayout.createSequentialGroup()
                                .addComponent(btnAnyadir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBorrar))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DatosLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(LabelNombreTabla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar)))
                .addGap(0, 17, Short.MAX_VALUE))
        );
        DatosLayout.setVerticalGroup(
            DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DatosLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelNombreTabla))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnyadir)
                    .addComponent(btnUpdate)
                    .addComponent(btnBorrar))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Datos", Datos);

        ListaCampos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ListaCampos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaCamposMouseClicked(evt);
            }
        });

        BtNuevoCampo.setText("Nuevo Campo");
        BtNuevoCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtNuevoCampoActionPerformed(evt);
            }
        });

        PanelNuevoCampo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("Nombre");

        jLabel6.setText("Tipo");

        TxtNombreCampo.setEnabled(false);

        ComboTipoCampo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "INT", "TEXT", "NUMERIC" }));
        ComboTipoCampo.setEnabled(false);

        CheckCP.setEnabled(false);
        CheckCP.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        CheckUnico.setEnabled(false);
        CheckUnico.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        CheckNulo.setEnabled(false);
        CheckNulo.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        BtAnyadirCampo.setText("Añadir");
        BtAnyadirCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtAnyadirCampoActionPerformed(evt);
            }
        });

        jLabel2.setText("Clave Primaria");

        jLabel10.setText("Único");

        jLabel11.setText("No nulo");

        CheckModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckModificarActionPerformed(evt);
            }
        });

        jLabel8.setText("Modificar");

        btnBorrarCampo.setText("Eliminar");
        btnBorrarCampo.setEnabled(false);

        javax.swing.GroupLayout PanelNuevoCampoLayout = new javax.swing.GroupLayout(PanelNuevoCampo);
        PanelNuevoCampo.setLayout(PanelNuevoCampoLayout);
        PanelNuevoCampoLayout.setHorizontalGroup(
            PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelNuevoCampoLayout.createSequentialGroup()
                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelNuevoCampoLayout.createSequentialGroup()
                        .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PanelNuevoCampoLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(24, 24, 24)
                                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TxtNombreCampo)
                                    .addComponent(ComboTipoCampo, 0, 116, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelNuevoCampoLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBorrarCampo)
                                .addGap(101, 101, 101)))
                        .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtAnyadirCampo)
                            .addGroup(PanelNuevoCampoLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckModificar))))
                    .addGroup(PanelNuevoCampoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckNulo)
                            .addComponent(CheckUnico)
                            .addComponent(CheckCP))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelNuevoCampoLayout.setVerticalGroup(
            PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelNuevoCampoLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckModificar)
                    .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TxtNombreCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboTipoCampo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CheckCP)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CheckUnico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckNulo)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(PanelNuevoCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtAnyadirCampo)
                    .addComponent(btnBorrarCampo))
                .addContainerGap())
        );

        javax.swing.GroupLayout EstructuraLayout = new javax.swing.GroupLayout(Estructura);
        Estructura.setLayout(EstructuraLayout);
        EstructuraLayout.setHorizontalGroup(
            EstructuraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EstructuraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ListaCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EstructuraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BtNuevoCampo)
                    .addComponent(PanelNuevoCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EstructuraLayout.setVerticalGroup(
            EstructuraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EstructuraLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(EstructuraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EstructuraLayout.createSequentialGroup()
                        .addComponent(PanelNuevoCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtNuevoCampo))
                    .addComponent(ListaCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7))
        );

        jTabbedPane1.addTab("Estructura", Estructura);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NombreNuevaTabla)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NuevaTabla)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreNuevaTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NuevaTabla))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que controla los eventos generados al hacer click sobre el listado de tablas tanto con el botón derecho
     * como con el izquierdo.
     */
    private void ListaTablasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaTablasMouseClicked

        if ((SwingUtilities.isRightMouseButton(evt)) && (!ListaTablas.isSelectionEmpty())
                && (ListaTablas.locationToIndex(evt.getPoint()) == ListaTablas.getSelectedIndex())) {
            jPopupMenu1.show(ListaTablas, evt.getX(), evt.getY());

        }

        if ((SwingUtilities.isLeftMouseButton(evt)) && (!ListaTablas.isSelectionEmpty())
                && (ListaTablas.locationToIndex(evt.getPoint()) == ListaTablas.getSelectedIndex())) {

            tablasel = ListaTablas.getSelectedValue().toString();
            System.out.println(tablasel);
            this.LabelNombreTabla.setText(tablasel);

            DefaultTableModel aModel = (DefaultTableModel) this.TablaDatos.getModel();
            aModel.setRowCount(0);
            DefaultTableModel rModel = c.datostabla((String) tablasel, aModel);
            rModel.addRow(new Object[]{});

            TablaDatos = new JTable(rModel);
            //paso el nombre de la tabla a pragma, y la cargo en un al.
            campos = c.listadocampos(tablasel);

            ArrayList<String> nombres = new ArrayList();

            for (campo cam : campos) {
                nombres.add(cam.getNombre());
            }
            ListaCampos.setListData(nombres.toArray());

        }

    }//GEN-LAST:event_ListaTablasMouseClicked

    /**
     * Método para crear una nueva tabla.
     */
    private void NuevaTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevaTablaActionPerformed
        String ntabla = this.NombreNuevaTabla.getText();

        if (!ntabla.equals("")) {
            tabla t = new tabla(ntabla);
            ArrayList<String> tablas = c.nuevatabla(t);

            System.out.println(tablas.toString());
            System.out.println("Nueva tabla...");
            ListaTablas.setListData(tablas.toArray());
            this.LabelNombreTabla.setText(ntabla);
        }
    }//GEN-LAST:event_NuevaTablaActionPerformed

     /**
     * Método para rellenar los datos de un nuevo campo.
     */
    private void BtNuevoCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtNuevoCampoActionPerformed
        activarnuevocampo(true, "Añadir");
        ListaCampos.setSelectedIndex(-1);
        this.TxtNombreCampo.setText("");
        this.ComboTipoCampo.setSelectedIndex(-1);
        this.CheckCP.setSelected(false);
        this.CheckUnico.setSelected(false);
        this.CheckNulo.setSelected(false);
        this.CheckModificar.setEnabled(false);
        this.CheckModificar.setSelected(false);
    }//GEN-LAST:event_BtNuevoCampoActionPerformed

    /**
     * Método para modificar o añadir los datos de un nuevo campo a nuestra tabla.
     */
    private void BtAnyadirCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtAnyadirCampoActionPerformed
        activarnuevocampo(false, "Modificar");
        this.CheckModificar.setSelected(false);
        this.CheckModificar.setEnabled(true);
        String campoNuevo, varTipo;
        //String tabla  = jList1.getSelectedValue().toString();
        campoNuevo = TxtNombreCampo.getText();
        varTipo = String.valueOf(ComboTipoCampo.getSelectedItem());
        try {
            //rename la tabla a tabla_old
            String tablaOld = c.renameTabla(tablasel, tablasel + "_temp");
            tabla told = new tabla(tablaOld, campos);
            campo nuevoc = new campo();
            nuevoc.setNombre(campoNuevo);
            nuevoc.setTipo(varTipo);
            if (CheckCP.isSelected()) {
                nuevoc.setPrimary(1);
            } else {
                nuevoc.setPrimary(0);
            }
            if (this.CheckNulo.isSelected()) {
                nuevoc.setNotNull(1);
            } else {
                nuevoc.setNotNull(0);
            }
            if (this.CheckUnico.isSelected()) {
                nuevoc.setUnique(1);
            } else {
                nuevoc.setUnique(0);
            }
            //Comprobamos si se ha modificado el campo o se ha añadido uno nuevo
            if (modificar) {
                int Posicion = ListaCampos.getSelectedIndex();
                if (Posicion != -1) {
                    //insertar el campo en el array de campos de arriba, en la posicion del mismo (la seleccionada en jlist2)
                    campos.add(Posicion, nuevoc);
                    campos.remove(Posicion + 1);
                } else {
                    campos.add(nuevoc);
                }
            } else {
                campos.add(nuevoc);
            }
            //create tabla qe se llame igual, con la colsel nueva
            //pasarle el array de arriba, que ya está modificado
            tabla tnueva = new tabla(tablasel, campos);
            c.modificarTabla(tnueva);
            //insert en nueva tabla, todos los datos, para eso:
            c.insertSelect(told, tnueva);
            //drop tabla vieja
            c.DropTabla(tablaOld);
            ArrayList<String> tablas = c.listadotablas();
            System.out.println(tablas.toString());
            System.out.println("Actualizo JLIST1...");
            ListaTablas.setListData(tablas.toArray());
            //Rellenamos el jTable con los nuevos datos y nuevos nombres de columna
            DefaultTableModel aModel = (DefaultTableModel) this.TablaDatos.getModel();
            aModel.setRowCount(0);

            DefaultTableModel rmodel = c.datostabla(tablasel, aModel);
            rmodel.addRow(new Object[]{});
            TablaDatos = new JTable(rmodel);

            //actualizo jlist2
            ArrayList<String> nombres = new ArrayList();
            for (campo cam : campos) {
                nombres.add(cam.getNombre());
            }
            ListaCampos.setListData(nombres.toArray());
        } catch (SQLException ex) {
            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BtAnyadirCampoActionPerformed

     /**
     * Método para activar las opciones de modificación de un campo seleccionado.
     */
    private void CheckModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckModificarActionPerformed
        if (this.CheckModificar.isSelected()) {
            activarnuevocampo(true, "Modificar");
            modificar = true;
            System.out.println(modificar);
        } else {
            activarnuevocampo(false, "Modificar");
        }
    }//GEN-LAST:event_CheckModificarActionPerformed
    
    /**
     * Método para crear una nueva base de datos.
     */
    private void btnCrearBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearBaseActionPerformed
        setRuta(NombreNuevaBase.getText());
        basedatos b = new basedatos(getRuta());
        DefaultListModel listmodel = new DefaultListModel();
        listmodel.removeAllElements();
        ((DefaultTableModel) TablaDatos.getModel()).setColumnCount(0);
        campos.clear();
        ListaCampos.setListData(campos.toArray());
        ListaCampos.setListData(campos.toArray());
        if (!ruta.equals("")) {
            CrearBD.setVisible(false);
            //this.OcultaPaneles();
            ArrayList<String> tablas = c.conectar(b);
            this.setVisible(true);
            activarnuevocampo(false, "Modificar");
            ListaTablas.setListData(tablas.toArray());
        }
    }//GEN-LAST:event_btnCrearBaseActionPerformed

    /**
     * Método que muestra el cuadro de diálogo de renombrar una tabla.
     */
    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        this.renombrarTabla.setVisible(true);
    }//GEN-LAST:event_ModificarActionPerformed

    /**
     * Método para borrar una tabla.
     */
    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        try {
            c.DropTabla(ListaTablas.getSelectedValue().toString());
            ArrayList<String> tablas = c.listadotablas();
            System.out.println("Tabla borrada");
            ListaTablas.setListData(tablas.toArray());
            ListaTablas.setSelectedIndex(0);
            this.LabelNombreTabla.setText(ListaTablas.getSelectedValue().toString());
        } catch (SQLException ex) {
            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BorrarActionPerformed

     /**
     * Método que controla los eventos generados al hacer click sobre el listado de campos.
     */
    private void ListaCamposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaCamposMouseClicked
        if ((SwingUtilities.isLeftMouseButton(evt)) && (!ListaCampos.isSelectionEmpty())
                && (ListaCampos.locationToIndex(evt.getPoint()) == ListaCampos.getSelectedIndex())) {

            System.out.println(ListaCampos.getSelectedValue());

            // tablasel = jList1.getSelectedValue().toString();
            String campo = ListaCampos.getSelectedValue().toString();

            for (campo cam : campos) {

                if (cam.getNombre().equals(campo)) {
                    this.TxtNombreCampo.setText(cam.getNombre());
                    this.ComboTipoCampo.setSelectedItem(cam.getTipo());

                    //Compruebo si el campo es clave primaria
                    if (cam.getPrimary() == 1) {
                        this.CheckCP.setSelected(true);
                    } else {
                        this.CheckCP.setSelected(false);
                    }
                    if (cam.getNotNull() == 1) {
                        this.CheckNulo.setSelected(true);
                    } else {
                        this.CheckNulo.setSelected(false);
                    }
                }
            }

        }
    }//GEN-LAST:event_ListaCamposMouseClicked

    /**
     * Método que renombra una tabla.
     */
    private void btnRenombrarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenombrarTablaActionPerformed
        int FilaSelec = ListaTablas.getSelectedIndex();
        c.renameTabla(ListaTablas.getSelectedValue().toString(), this.NombreNuevaTabla1.getText());
        this.renombrarTabla.setVisible(false);
        ArrayList<String> tablas = c.listadotablas();
        System.out.println("Tabla renombrada");
        ListaTablas.setListData(tablas.toArray());
        ListaTablas.setSelectedIndex(FilaSelec);
        this.LabelNombreTabla.setText(ListaTablas.getSelectedValue().toString());
    }//GEN-LAST:event_btnRenombrarTablaActionPerformed

    /**
     * Método para buscar datos en una tabla.
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            String varText;
            String tablaBusqueda = ListaTablas.getSelectedValue().toString();
            System.out.println(tablaBusqueda);
            varText = txtbuscar.getText();
            //Crear objeto tabla:
            //necesito nombre, y campos
            //obtengo listado de campos de la tabla que quiero buscar
            ArrayList<campo> misCampos = c.listadocampos(tablasel);
            //creo objeto tabla con esos campos y el nombre
            tabla t = new tabla(tablasel, misCampos);

            DefaultTableModel aModel = (DefaultTableModel) this.TablaDatos.getModel();
            aModel.setRowCount(0);
            DefaultTableModel rModel = c.select(t, varText, aModel);
            rModel.addRow(new Object[]{});
            TablaDatos = new JTable(rModel);
        } catch (SQLException ex) {
            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnBuscarActionPerformed
    
     /**
     * Método para borrar datos en una tabla.
     */
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        try {

            //borrar datos de la tabla. Borro la fila seleccionada
            tablasel = ListaTablas.getSelectedValue().toString();
            int numFila = TablaDatos.getSelectedColumn();
            System.out.println(tablasel);
            System.out.println("numero de column : " + rowsel);
            String idBorrar = TablaDatos.getModel().getValueAt(rowsel, 0).toString();
            int idBorrarInt = Integer.parseInt(idBorrar);
            c.borraDatos(tablasel, idBorrarInt);
            DefaultTableModel aModel = (DefaultTableModel) this.TablaDatos.getModel();
            aModel.setRowCount(0);
            DefaultTableModel rModel = c.datostabla((String) tablasel, aModel);
            rModel.addRow(new Object[]{});

            TablaDatos = new JTable(rModel);

            System.out.println("el valor es " + TablaDatos.getModel().getValueAt(rowsel, 0).toString());
            System.out.println(TablaDatos.getColumnName(TablaDatos.getSelectedRow()));

        } catch (SQLException ex) {
            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnBorrarActionPerformed
    /**
     * Método para añadir datos en una tabla.
     */
    private void btnAnyadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnyadirActionPerformed
        System.out.println("entro en añadir");
        try {
            System.out.println("entro en try");
            
            //añadir campo: coger valores del jtable y meterlos en array, hacer insert con esos valores

            ArrayList<String> nuevaFila = new ArrayList();

            //obtengo el valor de laultima fila
            
            System.out.println("numero de filas" + TablaDatos.getRowCount());
            //para cada columna, obtener el valor de la ultima fila:
            for (int i = 0; i < TablaDatos.getColumnCount(); i++) {
             
                nuevaFila.add((String) TablaDatos.getValueAt(TablaDatos.getRowCount() - 1, i));
            }

            for (String val : nuevaFila) {
                //System.out.println("Valor inicial : " + val);
            }
             //cambio los nulls del array por 0 para que no de problemas al insertar en campo numerico
            for(int i=0; i<nuevaFila.size();i++){
                String val=nuevaFila.get(i);
                 if(val == null || val.equals(""))//importante el equals, si no no va
                {
                    nuevaFila.set(i, "0");
                            }
            }
            
            for (String val : nuevaFila) {
                //System.out.println("Valor final : " + val);
            }
            
            //ya tengo la lista de campos y la de valores, voy a comprobar
            System.out.println("empiezo a comprobar");
            for(int i=0;i<campos.size();i++){
                String tipoCampo = campos.get(i).getTipo();
                if(!tipoCampo.equals("TEXT")){ //no es texto
                    System.out.println(tipoCampo);
                    if(isInteger(nuevaFila.get(i))!= true){
                        System.out.println("aqui el error");
                        try {  
                            throw new ExcepString("error");
                        } catch (ExcepString ex) {
                            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }  
                } 
                else{
                    System.out.println("si es texto");
                }

            }
        
            
            //funcion insertar, le paso lista de campos y Array de valores, y tabla
            System.out.println("voy a hacer la insert");
            String tabla = ListaTablas.getSelectedValue().toString();
            c.insertFila(tablasel, campos, nuevaFila);

            DefaultTableModel aModel = (DefaultTableModel) this.TablaDatos.getModel();
            aModel.setRowCount(0);
            DefaultTableModel rModel = c.datostabla((String) tablasel, aModel);
            rModel.addRow(new Object[]{});

            TablaDatos = new JTable(rModel);
        } catch (SQLException ex) {
            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnyadirActionPerformed

    /**
     * Método para modificar datos en una tabla.
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        System.out.println("entro en modificar");
            //obtener seleccion
        //obtener valores de la columna seleccionada, están en rowsel
        ArrayList<String> nuevaFila = new ArrayList();
          
              //para cada columna, obtener el valor de la fila seleccionada
        //meterlo en array
        for (int i = 0; i < TablaDatos.getColumnCount(); i++) {
            System.out.println(i);
            Object valor = TablaDatos.getModel().getValueAt(rowsel, i);
            String valorStr = "";
            if (valor != null) {
                valorStr = valor.toString();
            }

                
            nuevaFila.add(valorStr);
        }
         //cambio los nulls del array por 0 para que no de problemas al insertar en campo numerico
            for(int i=0; i<nuevaFila.size();i++){
                String val=nuevaFila.get(i);
                 if(val == null || val.equals(""))//importante el equals, si no no va
                {
                    nuevaFila.set(i, "0");
                            }
            }

        //saco valor de la fila seleccionada (id)
        String idBorrar = TablaDatos.getModel().getValueAt(rowsel, 0).toString();
        int idBorrarInt = Integer.parseInt(idBorrar);

        for (String a : nuevaFila) {
            System.out.println("valor: " + a);
        }
        System.out.println("con el id " + idBorrarInt);
        //tengo el array de campos y el de , empiezo a comprobar
           //ya tengo la lista de campos y la de valores, voy a comprobar
            System.out.println("empiezo a comprobar");
            for(int i=0;i<campos.size();i++){
                String tipoCampo = campos.get(i).getTipo();
                if(!tipoCampo.equals("TEXT")){ //no es texto
                    System.out.println(tipoCampo);
                    if(isInteger(nuevaFila.get(i))!= true){
                        System.out.println("aqui el error");
                        try {  
                            throw new ExcepString("error");
                        } catch (ExcepString ex) {
                            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }  
                } 
                else{
                    System.out.println("si es texto");
                }

            }
        //fin comprobar
        
        try {
            //le paso el array de campos, la tabla y el id a la funcion
            c.updateDatos(tablasel, campos, nuevaFila, idBorrarInt);
            DefaultTableModel aModel = (DefaultTableModel) this.TablaDatos.getModel();
            aModel.setRowCount(0);
            DefaultTableModel rModel = c.datostabla((String) tablasel, aModel);
            rModel.addRow(new Object[]{});

            TablaDatos = new JTable(rModel);
        } catch (SQLException ex) {
            Logger.getLogger(bdPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnUpdateActionPerformed
    
    /**
     * Método que devuelve fila y columna seleccionada en nuestro jTable.
     */
    private void TablaDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaDatosMouseClicked

        rowsel = TablaDatos.rowAtPoint(evt.getPoint());
        colsel = TablaDatos.columnAtPoint(evt.getPoint());
        System.out.println(rowsel);

    }//GEN-LAST:event_TablaDatosMouseClicked

    /**
     * Botón cancelar de Nueva Base de datos.
     */
    private void btnCancelarNuevaBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarNuevaBaseActionPerformed
        this.CrearBD.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarNuevaBaseActionPerformed

    /**
     * Botón cancelar de Renombrar Tabla.
     */
    private void btnCancelarRenombrarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarRenombrarTablaActionPerformed
        this.renombrarTabla.setVisible(false);
    }//GEN-LAST:event_btnCancelarRenombrarTablaActionPerformed

    /**
     * Método para activar opciones de nuevo campo.
     */
    public void activarnuevocampo(boolean estado, String txtboton) {
        this.BtAnyadirCampo.setText(txtboton);
        this.TxtNombreCampo.setEnabled(estado);
        this.ComboTipoCampo.setEnabled(estado);
        this.CheckUnico.setEnabled(estado);
        this.CheckNulo.setEnabled(estado);
        this.BtAnyadirCampo.setEnabled(estado);
    }

    /**
     *
     * Función para seleccionar fichero a través de un cuadro de diálogo:
     *
     * @return fichero (File). Fichero seleccionado.
     */
    public File dialogoSeleccionTipoRecurso() {
        File fichero = null;
        int rv;
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setDialogType(JFileChooser.OPEN_DIALOG);
        rv = fc.showOpenDialog(this);
        if (rv == JFileChooser.APPROVE_OPTION) {
            fichero = fc.getSelectedFile();
        }
        return fichero;
    }

    /**
     *
     * Función para saber si un dato introducido es un número.
     *
     * @return boolean.
     */
    public boolean isInteger( String input )  
{  
   try  
   {  
      Integer.parseInt( input );  
      return true;  
   }  
   catch( Exception noInt)  
   {  
      
      return false;  
   }  
}  
     /**
     *
     * Método para conectar con una base de datos.
     */   
    public void conectarbd(String ruta) {
        setRuta(ruta);
        basedatos b = new basedatos(getRuta());
        DefaultListModel listmodel = new DefaultListModel();
        listmodel.removeAllElements();
        ((DefaultTableModel) TablaDatos.getModel()).setColumnCount(0);
        campos.clear();
        if (!ruta.equals("")) {
            //this.OcultaPaneles();
            ArrayList<String> tablas = c.conectar(b);
            this.setVisible(true);
            activarnuevocampo(false, "Modificar");
            ListaTablas.setListData(tablas.toArray());

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Borrar;
    private javax.swing.JButton BtAnyadirCampo;
    private javax.swing.JButton BtNuevoCampo;
    private javax.swing.JCheckBox CheckCP;
    private javax.swing.JCheckBox CheckModificar;
    private javax.swing.JCheckBox CheckNulo;
    private javax.swing.JCheckBox CheckUnico;
    private javax.swing.JComboBox ComboTipoCampo;
    public javax.swing.JDialog CrearBD;
    private javax.swing.JPanel Datos;
    private javax.swing.JPanel Estructura;
    private javax.swing.JLabel LabelNombreTabla;
    public javax.swing.JList ListaCampos;
    public javax.swing.JList ListaTablas;
    private javax.swing.JMenuItem Modificar;
    private javax.swing.JTextField NombreNuevaBase;
    private javax.swing.JTextField NombreNuevaTabla;
    private javax.swing.JTextField NombreNuevaTabla1;
    private javax.swing.JButton NuevaTabla;
    private javax.swing.JPanel PanelNuevoCampo;
    private javax.swing.JTable TablaDatos;
    private javax.swing.JTextField TxtNombreCampo;
    private javax.swing.JButton btnAnyadir;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBorrarCampo;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelarNuevaBase;
    private javax.swing.JButton btnCancelarRenombrarTabla;
    private javax.swing.JButton btnCrearBase;
    private javax.swing.JButton btnRenombrarTabla;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JDialog renombrarTabla;
    private javax.swing.JTextField txtbuscar;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the ruta
     */
    public String getRuta() {
        return ruta;
    }

    /**
     * @param ruta the ruta to set
     */
    public void setRuta(String ruta) {
        this.ruta = ruta;
    }
}
