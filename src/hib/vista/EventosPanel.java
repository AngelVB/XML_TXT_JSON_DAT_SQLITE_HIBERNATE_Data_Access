/*
 * Clase que alojará el panel de BD y todas las funciones de los botones de la vista
 */
package hib.vista;

import hib.modelo.ListModelAmigo;
import hib.controlador.ContactoHasEventoJpaController;
import hib.controlador.ContactoJpaController;
import hib.controlador.EventoJpaController;
import hib.controlador.LugarJpaController;
import hib.controlador.NotaJpaController;
import hib.controlador.exceptions.IllegalOrphanException;
import hib.controlador.exceptions.NonexistentEntityException;
import hib.modelo.*;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Pablo Pardo y Ángel Valera
 */
public class EventosPanel extends javax.swing.JPanel {

    private String usuarioInsertado = "";
    private String passwordInsertado = "";
    //Creo los objetos para poder acceder a sus métodos.
    EntityManagerFactory emf;
    EntityManager em;
    ContactoJpaController c;
    EventoJpaController e;
    NotaJpaController n;
    LugarJpaController l;
    ContactoHasEventoJpaController ce;
    Contacto contLogged;
    Contacto AmigoSelec;
    Nota NotaSelec;
    Evento EventoSelec;
    ListModelAmigo modelAmigo;
    ListModelAmigo modelPosibleInvitado;
    ListModelAmigo modelInvitado;
    ListModelAmigo modelPosibleAmigo;
    ListModelNota modelNota;
    ListModelEvento modelEventoPropio;
    ListModelEvento modelEventoInvitado;

    /**
     * Creates new form bdPanel
     */
    public EventosPanel() {

        initComponents();
        emf = Persistence.createEntityManagerFactory("accesoDOMPU");
        em = emf.createEntityManager();

        c = new ContactoJpaController(emf);
        e = new EventoJpaController(emf);
        n = new NotaJpaController(emf);
        l = new LugarJpaController(emf);

        ce = new ContactoHasEventoJpaController(emf);
        EventoSelec = new Evento();
        NotaSelec = new Nota();
        AmigoSelec = new Contacto();
        contLogged = new Contacto();
        MyItemListener actionListener = new MyItemListener();
        comboLugar.addItemListener(actionListener);

        CBAsistir.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {

                ContactoHasEventoPK cepk = new ContactoHasEventoPK();
                cepk.setContactoId(contLogged.getId());
                cepk.setEventoId(EventoSelec.getId());

                ContactoHasEvento cev = ce.findContactoHasEvento(cepk);

                if (e.getStateChange() == ItemEvent.SELECTED) {
                    cev.setAcude(1);

                } else {
                    cev.setAcude(0);
                }
                try {
                    ce.edit(cev);
                } catch (Exception ex) {
                    Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Login = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        loginUsuario = new javax.swing.JTextField();
        btnLogin = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        loginpassword = new javax.swing.JPasswordField();
        panelAltaUsuario = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        altaNombre = new javax.swing.JTextField();
        btnAlta = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        altaPass = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        altaUser = new javax.swing.JTextField();
        altaTel = new javax.swing.JTextField();
        altaEmail = new javax.swing.JTextField();
        panelNuevoLugar = new javax.swing.JDialog();
        btnCancelarNuevaBase5 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        nuevoLugarCalle = new javax.swing.JTextField();
        nuevoCP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pestanyaEventos = new javax.swing.JPanel();
        NuevoEvento = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        ListaPropios = new javax.swing.JList();
        jScrollPane9 = new javax.swing.JScrollPane();
        ListaInvitado = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        TituloEvento = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        DescripcionEvento = new javax.swing.JTextArea();
        comboLugar = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        BTNNuevoLugar = new javax.swing.JButton();
        CBAsistir = new javax.swing.JCheckBox();
        txtCP = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        BTCrear = new javax.swing.JButton();
        BTModificar = new javax.swing.JButton();
        BTEliminar = new javax.swing.JButton();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListInvitados = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        ListPosiblesInvitados = new javax.swing.JList();
        LabelAsistentes = new javax.swing.JLabel();
        Asistentes = new javax.swing.JLabel();
        pestanyaAmigos = new javax.swing.JPanel();
        NuevoAmigo = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        ListaAmigos = new javax.swing.JList();
        NombreAmigo = new javax.swing.JTextField();
        NickAmigo = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        EmailAmigo = new javax.swing.JTextField();
        TelefonoAmigo = new javax.swing.JTextField();
        EliminarAmigo = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        ListaPosiblesAmigos = new javax.swing.JList();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        pestanyaNotas = new javax.swing.JPanel();
        FechaNota = new com.toedter.calendar.JDateChooser();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtnotatexto = new javax.swing.JTextArea();
        jCombonotaprior = new javax.swing.JComboBox();
        BTCrearNota = new javax.swing.JButton();
        txtnotaResumen = new javax.swing.JTextField();
        jScrollPane10 = new javax.swing.JScrollPane();
        ListaNotas = new javax.swing.JList();
        NuevaNota = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        BTModificarNota = new javax.swing.JButton();
        BTEliminarNota = new javax.swing.JButton();
        pestanyaDatosPers = new javax.swing.JPanel();
        Nombre = new javax.swing.JTextField();
        Nick = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        Email = new javax.swing.JTextField();
        Telefono = new javax.swing.JTextField();
        BTModificarDatos = new javax.swing.JButton();
        Password = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        muestraNombre = new javax.swing.JLabel();

        Login.setTitle("Login");
        Login.setMinimumSize(new java.awt.Dimension(300, 150));
        Login.setModal(true);

        jLabel1.setText("Usuario");

        loginUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginUsuarioActionPerformed(evt);
            }
        });

        btnLogin.setActionCommand("Acceder");
        btnLogin.setLabel("Acceder");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        jLabel2.setText("Contraseña");

        loginpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginpasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginLayout = new javax.swing.GroupLayout(Login.getContentPane());
        Login.getContentPane().setLayout(LoginLayout);
        LoginLayout.setHorizontalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoginLayout.createSequentialGroup()
                        .addGap(0, 192, Short.MAX_VALUE)
                        .addComponent(btnLogin))
                    .addGroup(LoginLayout.createSequentialGroup()
                        .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(38, 38, 38)
                        .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginUsuario)
                            .addComponent(loginpassword, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(17, 17, 17))
        );
        LoginLayout.setVerticalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(loginUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(loginpassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(btnLogin)
                .addGap(37, 37, 37))
        );

        panelAltaUsuario.setTitle("Alta Usuario");
        panelAltaUsuario.setMinimumSize(new java.awt.Dimension(300, 220));
        panelAltaUsuario.setModal(true);

        jLabel3.setText("Nombre");

        altaNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altaNombreActionPerformed(evt);
            }
        });

        btnAlta.setText("Crear");
        btnAlta.setActionCommand("Acceder");
        btnAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAltaActionPerformed(evt);
            }
        });

        jLabel4.setText("Contraseña");

        altaPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altaPassActionPerformed(evt);
            }
        });

        jLabel5.setText("Teléfono");

        jLabel6.setText("email");

        jLabel8.setText("usuario");

        altaUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altaUserActionPerformed(evt);
            }
        });

        altaTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altaTelActionPerformed(evt);
            }
        });

        altaEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altaEmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAltaUsuarioLayout = new javax.swing.GroupLayout(panelAltaUsuario.getContentPane());
        panelAltaUsuario.getContentPane().setLayout(panelAltaUsuarioLayout);
        panelAltaUsuarioLayout.setHorizontalGroup(
            panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAltaUsuarioLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAlta)
                    .addGroup(panelAltaUsuarioLayout.createSequentialGroup()
                        .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(altaPass, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(altaEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(altaTel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(altaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(altaUser, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53))
        );

        panelAltaUsuarioLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {altaEmail, altaNombre, altaPass, altaTel, altaUser});

        panelAltaUsuarioLayout.setVerticalGroup(
            panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAltaUsuarioLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altaTel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altaEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altaUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAltaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altaPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAlta)
                .addGap(12, 12, 12))
        );

        panelAltaUsuarioLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {altaEmail, altaNombre, altaPass, altaTel, altaUser});

        panelNuevoLugar.setTitle("Nuevo Lugar");
        panelNuevoLugar.setMinimumSize(new java.awt.Dimension(334, 170));
        panelNuevoLugar.setModal(true);

        btnCancelarNuevaBase5.setText("Crear");
        btnCancelarNuevaBase5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarNuevaBase5ActionPerformed(evt);
            }
        });

        jLabel20.setText("Calle:");

        jLabel21.setText("Cód. Postal:");

        nuevoCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoCPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNuevoLugarLayout = new javax.swing.GroupLayout(panelNuevoLugar.getContentPane());
        panelNuevoLugar.getContentPane().setLayout(panelNuevoLugarLayout);
        panelNuevoLugarLayout.setHorizontalGroup(
            panelNuevoLugarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNuevoLugarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNuevoLugarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNuevoLugarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancelarNuevaBase5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelNuevoLugarLayout.createSequentialGroup()
                        .addGroup(panelNuevoLugarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelNuevoLugarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nuevoLugarCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nuevoCP, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelNuevoLugarLayout.setVerticalGroup(
            panelNuevoLugarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNuevoLugarLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelNuevoLugarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoLugarCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelNuevoLugarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(nuevoCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCancelarNuevaBase5)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        setMaximumSize(new java.awt.Dimension(800, 800));
        setPreferredSize(new java.awt.Dimension(703, 467));

        jLabel7.setText("Agenda de eventos");

        jLabel10.setText("Bienvenido ");

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(0, 0));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(703, 467));

        pestanyaEventos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        NuevoEvento.setText("Nuevo Evento");
        NuevoEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoEventoActionPerformed(evt);
            }
        });

        jTabbedPane2.setName("Propios"); // NOI18N

        ListaPropios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListaPropios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaPropiosMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(ListaPropios);

        jTabbedPane2.addTab("Propios", jScrollPane6);

        ListaInvitado.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListaInvitado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaInvitadoMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(ListaInvitado);

        jTabbedPane2.addTab("Invitado", jScrollPane9);

        jLabel15.setText("Título");

        jLabel16.setText("Fecha Inicio");

        jLabel18.setText("Fecha Fin");

        jLabel22.setText("Descripción");

        DescripcionEvento.setColumns(20);
        DescripcionEvento.setRows(5);
        jScrollPane3.setViewportView(DescripcionEvento);

        jLabel27.setText("Lugar");

        BTNNuevoLugar.setText("Nuevo Lugar");
        BTNNuevoLugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNNuevoLugarActionPerformed(evt);
            }
        });

        CBAsistir.setText("Asistiré");
        CBAsistir.setToolTipText("");

        txtCP.setEditable(false);

        jLabel11.setText("Cod. Postal");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel27)
                            .addComponent(jLabel15)
                            .addComponent(jLabel11))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CBAsistir)
                                .addGap(49, 49, 49))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TituloEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(comboLugar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(BTNNuevoLugar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(CBAsistir))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(TituloEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboLugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(BTNNuevoLugar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        BTCrear.setText("Crear");
        BTCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTCrearActionPerformed(evt);
            }
        });

        BTModificar.setText("Modificar");
        BTModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarActionPerformed(evt);
            }
        });

        BTEliminar.setText("Eliminar");
        BTEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEliminarActionPerformed(evt);
            }
        });

        ListInvitados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(ListInvitados);

        jTabbedPane4.addTab("Invitados", jScrollPane1);

        jScrollPane8.setViewportView(ListPosiblesInvitados);

        jTabbedPane4.addTab("No Inv.", jScrollPane8);

        LabelAsistentes.setText("Nº Asistentes");

        Asistentes.setForeground(new java.awt.Color(0, 153, 0));

        javax.swing.GroupLayout pestanyaEventosLayout = new javax.swing.GroupLayout(pestanyaEventos);
        pestanyaEventos.setLayout(pestanyaEventosLayout);
        pestanyaEventosLayout.setHorizontalGroup(
            pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(NuevoEvento, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pestanyaEventosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pestanyaEventosLayout.createSequentialGroup()
                                .addComponent(BTEliminar)
                                .addGap(18, 18, 18)
                                .addComponent(BTModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BTCrear))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(pestanyaEventosLayout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(LabelAsistentes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Asistentes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pestanyaEventosLayout.setVerticalGroup(
            pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaEventosLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pestanyaEventosLayout.createSequentialGroup()
                        .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(NuevoEvento)
                            .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(LabelAsistentes)
                                .addComponent(Asistentes, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pestanyaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BTEliminar)
                                    .addComponent(BTModificar))
                                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pestanyaEventosLayout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BTCrear))))
                    .addGroup(pestanyaEventosLayout.createSequentialGroup()
                        .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("tabpropios");

        jTabbedPane1.addTab("Eventos", pestanyaEventos);

        pestanyaAmigos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        NuevoAmigo.setText("Añadir");
        NuevoAmigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoAmigoActionPerformed(evt);
            }
        });

        ListaAmigos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListaAmigos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaAmigosMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(ListaAmigos);

        NombreAmigo.setEditable(false);
        NombreAmigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreAmigoActionPerformed(evt);
            }
        });

        NickAmigo.setEditable(false);

        jLabel31.setText("Nombre");

        jLabel32.setText("Telefono");

        jLabel33.setText("Email");

        jLabel34.setText("Nick");

        EmailAmigo.setEditable(false);
        EmailAmigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailAmigoActionPerformed(evt);
            }
        });

        TelefonoAmigo.setEditable(false);
        TelefonoAmigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TelefonoAmigoActionPerformed(evt);
            }
        });

        EliminarAmigo.setText("Eliminar");
        EliminarAmigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarAmigoActionPerformed(evt);
            }
        });

        ListaPosiblesAmigos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ListaPosiblesAmigos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListaPosiblesAmigos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaPosiblesAmigosMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(ListaPosiblesAmigos);

        jLabel35.setText("Amigos");

        jLabel36.setText("Datos Amigo");

        jLabel37.setText("Resto de usuarios:");

        javax.swing.GroupLayout pestanyaAmigosLayout = new javax.swing.GroupLayout(pestanyaAmigos);
        pestanyaAmigos.setLayout(pestanyaAmigosLayout);
        pestanyaAmigosLayout.setHorizontalGroup(
            pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaAmigosLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pestanyaAmigosLayout.createSequentialGroup()
                        .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EliminarAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pestanyaAmigosLayout.createSequentialGroup()
                                .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(jLabel32)
                                    .addGroup(pestanyaAmigosLayout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel34)
                                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TelefonoAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NombreAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EmailAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NickAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pestanyaAmigosLayout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(jLabel36))))
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(NuevoAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        pestanyaAmigosLayout.setVerticalGroup(
            pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaAmigosLayout.createSequentialGroup()
                .addGap(0, 72, Short.MAX_VALUE)
                .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pestanyaAmigosLayout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addGap(18, 18, 18)
                        .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(NombreAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TelefonoAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmailAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NickAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34)))
                    .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pestanyaAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EliminarAmigo)
                    .addComponent(NuevoAmigo))
                .addContainerGap())
        );

        jLabel37.getAccessibleContext().setAccessibleName("usuarios");

        jTabbedPane1.addTab("Amigos", pestanyaAmigos);

        pestanyaNotas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        FechaNota.setDateFormatString("dd-MM-yyyy");
        FechaNota.setMinSelectableDate(new java.util.Date(1422745200000L));

        txtnotatexto.setColumns(20);
        txtnotatexto.setRows(5);
        jScrollPane5.setViewportView(txtnotatexto);

        jCombonotaprior.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Alta", "Media", "Baja" }));

        BTCrearNota.setText("Crear");
        BTCrearNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTCrearNotaActionPerformed(evt);
            }
        });

        ListaNotas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListaNotas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaNotasMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(ListaNotas);

        NuevaNota.setText("Nueva Nota");
        NuevaNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevaNotaActionPerformed(evt);
            }
        });

        jLabel28.setText("Fecha");

        jLabel29.setText("Título");

        jLabel30.setText("Prioridad");

        BTModificarNota.setText("Modificar");
        BTModificarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarNotaActionPerformed(evt);
            }
        });

        BTEliminarNota.setText("Eliminar");
        BTEliminarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEliminarNotaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pestanyaNotasLayout = new javax.swing.GroupLayout(pestanyaNotas);
        pestanyaNotas.setLayout(pestanyaNotasLayout);
        pestanyaNotasLayout.setHorizontalGroup(
            pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaNotasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NuevaNota, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pestanyaNotasLayout.createSequentialGroup()
                        .addComponent(BTEliminarNota)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BTModificarNota)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTCrearNota, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pestanyaNotasLayout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addComponent(FechaNota, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCombonotaprior, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtnotaResumen)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(87, 87, 87))
        );
        pestanyaNotasLayout.setVerticalGroup(
            pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaNotasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(NuevaNota)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pestanyaNotasLayout.createSequentialGroup()
                        .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel28)
                                .addComponent(jCombonotaprior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel30))
                            .addComponent(FechaNota, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtnotaResumen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pestanyaNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTCrearNota)
                            .addComponent(BTModificarNota)
                            .addComponent(BTEliminarNota))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Notas", pestanyaNotas);

        pestanyaDatosPers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreActionPerformed(evt);
            }
        });

        jLabel23.setText("Nombre");

        jLabel24.setText("Telefono");

        jLabel25.setText("Email");

        jLabel26.setText("Nick");

        Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailActionPerformed(evt);
            }
        });

        Telefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TelefonoActionPerformed(evt);
            }
        });

        BTModificarDatos.setText("Modificar");
        BTModificarDatos.setActionCommand("");
        BTModificarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarDatosActionPerformed(evt);
            }
        });

        Password.setText("jPasswordField1");

        jLabel9.setText("Password");

        javax.swing.GroupLayout pestanyaDatosPersLayout = new javax.swing.GroupLayout(pestanyaDatosPers);
        pestanyaDatosPers.setLayout(pestanyaDatosPersLayout);
        pestanyaDatosPersLayout.setHorizontalGroup(
            pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaDatosPersLayout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BTModificarDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pestanyaDatosPersLayout.createSequentialGroup()
                        .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pestanyaDatosPersLayout.createSequentialGroup()
                                .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel24)
                                    .addGroup(pestanyaDatosPersLayout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel26)
                                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Nick, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(241, 241, 241))
        );

        pestanyaDatosPersLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Email, Nick, Nombre, Password, Telefono});

        pestanyaDatosPersLayout.setVerticalGroup(
            pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pestanyaDatosPersLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pestanyaDatosPersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTModificarDatos)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Datos Personales", pestanyaDatosPers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(muestraNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(138, 138, 138)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(muestraNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void loginpasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginpasswordActionPerformed

    }//GEN-LAST:event_loginpasswordActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        //Login
        usuarioInsertado = loginUsuario.getText();
        passwordInsertado = String.copyValueOf(loginpassword.getPassword());

        Query q = em.createNamedQuery("Contacto.findByUserPassword");
        q.setParameter("user", usuarioInsertado);
        q.setParameter("password", passwordInsertado);
        q.setHint("javax.persistence.cache.storeMode", "REFRESH");

        List<Contacto> logueado = q.getResultList();

        if (logueado.size() > 0) {
            Login.setVisible(false);
            em.getEntityManagerFactory().getCache().evictAll();
            contLogged = logueado.get(0);

            LimpiarComponentes();
            RellenaDatos();
            RellenaListaAmigos();
            RellenaListaEventos();
            RellenaListaNotas();

            muestraNombre.setText(contLogged.getNombre());

            JOptionPane.showMessageDialog(null, "Bienvenido/a " + contLogged.getNombre());
            setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "Usuario desconocido");
        }

    }//GEN-LAST:event_btnLoginActionPerformed
    private void LimpiarComponentes() {

        //Bloqueo los botones al inicio
        BTCrear.setVisible(true);
        BTCrear.setEnabled(false);
        BTModificar.setVisible(true);
        BTModificar.setEnabled(false);
        BTEliminar.setVisible(true);
        BTEliminar.setEnabled(false);
        BTCrearNota.setVisible(true);
        BTCrearNota.setEnabled(false);
        BTModificarNota.setVisible(true);
        BTModificarNota.setEnabled(false);
        BTEliminarNota.setVisible(true);
        BTEliminarNota.setEnabled(false);

        estadoCamposEventos(false);
        estadoCamposNotas(false);

        modelEventoInvitado = new ListModelEvento();
        modelEventoPropio = new ListModelEvento();
        modelNota = new ListModelNota();
        modelPosibleAmigo = new ListModelAmigo();
        modelPosibleInvitado = new ListModelAmigo();
        modelAmigo = new ListModelAmigo();
        modelInvitado = new ListModelAmigo();
        ListaAmigos.setModel(modelAmigo);
        ListaNotas.setModel(modelNota);
        ListaPropios.setModel(modelEventoPropio);
        ListaInvitado.setModel(modelEventoInvitado);
        ListPosiblesInvitados.setModel(modelPosibleInvitado);
        ListaPosiblesAmigos.setModel(modelPosibleAmigo);
        ListInvitados.setModel(modelInvitado);

        comboLugar.removeAllItems();

        for (Lugar lug : l.findLugarEntities()) {

            comboLugar.addItem(lug);
        }

        TituloEvento.setText("");
        Date d = new Date();
        jDateChooser1.setDate(d);
        jDateChooser2.setDate(d);
        DescripcionEvento.setText("");
        txtnotaResumen.setText("");
        txtnotatexto.setText("");
        FechaNota.setDate(d);

        for (Component C : getComponents()) {
            if (C instanceof JTextField || C instanceof JTextArea) {

                ((JTextComponent) C).setText(""); //abstract superclass
            }
        }

    }

    private void RellenaDatos() {
        Nombre.setText(contLogged.getNombre());
        Telefono.setText(contLogged.getTelefono());
        Email.setText(contLogged.getEmail());
        Nick.setText(contLogged.getUser());
        Password.setText(contLogged.getPassword());

    }

    private void RellenaListaAmigos() {

        //Relleno la lista de amigos
        for (Contacto co : contLogged.getContactoCollection1()) {

            modelAmigo.addAmigo(co);
        }
        for (Contacto co : contLogged.getContactoCollection()) {
            modelAmigo.addAmigo(co);
        }
        //----------------------------

        //Relleno la lista de posibles amigos con todos los contactos.
        for (Contacto co : c.findContactoEntities()) {
            if (!co.equals(contLogged)) {

                modelPosibleAmigo.addAmigo(co);
            }
        }
        //------------------------------

        //Con esto elimino de la lista de posibles amigos a mis amigos y a mí mismo.
        for (int i = 0; i < modelAmigo.getSize(); i++) {
            Contacto con = (Contacto) modelAmigo.getAmigo(i);

            for (int j = 0; j < modelPosibleAmigo.getSize(); j++) {
                Contacto co = modelPosibleAmigo.getAmigo(j);
                if ((co.getUser().equals(con.getUser()))) {
                    modelPosibleAmigo.eliminarPersona(j);

                }

            }
        }
        //-------------------------------------------------------
    }

    private void RellenaListaEventos() {

        for (Evento e : contLogged.getEventoCollection()) {

            modelEventoPropio.addEvento(e);
        }

        for (ContactoHasEvento e : contLogged.getContactoHasEventoCollection()) {

            modelEventoInvitado.addEvento(e.getEvento());

        }

        //Relleno los posibles invitados a eventos con mis amigos
        for (int i = 0; i < modelAmigo.getSize(); i++) {
            Contacto cont = modelAmigo.getAmigo(i);
            modelPosibleInvitado.addAmigo(cont);
        }

    }

    private void estadoCamposEventos(boolean estado) {
        //Método para habilitar o deshabilitar todos los campos
        BTNNuevoLugar.setEnabled(estado);
        jDateChooser1.setEnabled(estado);
        jDateChooser2.setEnabled(estado);
        comboLugar.setEnabled(estado);
        DescripcionEvento.setEnabled(estado);
        TituloEvento.setEnabled(estado);
        txtCP.setEnabled(estado);
        CBAsistir.setEnabled(false);
    }

    private void estadoCamposNotas(boolean estado) {
        //Método para habilitar o deshabilitar todos los campos
        FechaNota.setEnabled(estado);
        txtnotaResumen.setEnabled(estado);
        txtnotatexto.setEnabled(estado);
        jCombonotaprior.setEnabled(estado);
    }

    private void RellenaListaNotas() {

       
        for (Nota n : contLogged.getNotaCollection()) {
            modelNota.addNota(n);

        }

    }

    private void loginUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginUsuarioActionPerformed

    }//GEN-LAST:event_loginUsuarioActionPerformed

    private void btnCancelarNuevaBase5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarNuevaBase5ActionPerformed
        String calle, codpost;
        calle = nuevoLugarCalle.getText();
        codpost = nuevoCP.getText();
        if (calle.equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir una calle");
        } else if (codpost.equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un código postal");
        } else {
            Lugar Lu = new Lugar();
            Lu.setCalle(calle);
            Lu.setCodpost(codpost);
            l.create(Lu);
            comboLugar.addItem(Lu);
            comboLugar.setSelectedItem(Lu);
            JOptionPane.showMessageDialog(null, "Lugar creado con éxito");
            panelNuevoLugar.setVisible(false);
        }


    }//GEN-LAST:event_btnCancelarNuevaBase5ActionPerformed

    private void nuevoCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoCPActionPerformed
        
    }//GEN-LAST:event_nuevoCPActionPerformed

    private void NuevoAmigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoAmigoActionPerformed

        int selection = ListaPosiblesAmigos.getSelectedIndex();

        if (selection > -1) {
            Contacto am = modelPosibleAmigo.getAmigo(selection);

            if (c.anyadirAmigo(contLogged, am)) {
                JOptionPane.showMessageDialog(null, "Amigo añadido con éxito");
            } else {
                JOptionPane.showMessageDialog(null, "Error añadiendo amigo");
            }

            modelPosibleAmigo.eliminarPersona(selection);
            modelAmigo.addAmigo(am);
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un contacto para añadir");
        }
    }//GEN-LAST:event_NuevoAmigoActionPerformed

    private void BTCrearNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTCrearNotaActionPerformed

        String resumen, texto, prioridad;

        Date FechaNota1 = FechaNota.getDate();
        resumen = txtnotaResumen.getText();
        texto = txtnotatexto.getText();
        prioridad = jCombonotaprior.getSelectedItem().toString();

        if (FechaNota1 == null) {
            JOptionPane.showMessageDialog(null, "Debe introducir una fecha válida");
        } else if (resumen.equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un título a la nota");
        } else if (prioridad.equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir una prioridad");
        } else {
            Nota no = new Nota();
            no.setResumen(resumen);
            no.setFecha(FechaNota1);
            no.setContactoId(contLogged);
            no.setImportancia(prioridad);
            no.setTexto(texto);
            try {
                n.create(no);
                JOptionPane.showMessageDialog(null, "Nota creada con éxito");
                modelNota.addNota(no);
                txtnotaResumen.setText("");
                txtnotatexto.setText("");
                Date d = new Date();
                FechaNota.setDate(d);
                estadoCamposNotas(false);
                BTCrearNota.setEnabled(false);
                BTEliminarNota.setEnabled(false);
                BTModificarNota.setEnabled(false);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error creando nota");
            }
        }

    }//GEN-LAST:event_BTCrearNotaActionPerformed

    private void NombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_NombreActionPerformed

    private void EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmailActionPerformed

    private void TelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TelefonoActionPerformed

    private void altaEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altaEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_altaEmailActionPerformed

    private void altaTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altaTelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_altaTelActionPerformed

    private void altaUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altaUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_altaUserActionPerformed

    private void altaPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altaPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_altaPassActionPerformed

    private void btnAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAltaActionPerformed
        //almaceno el error en esta variable
        boolean error = false;
        String nombre, tlf, email, user, pass;
        nombre = altaNombre.getText();
        tlf = altaTel.getText();
        email = altaEmail.getText();
        user = altaUser.getText();
        pass = String.copyValueOf(altaPass.getPassword());
        //valido campos
        if ("".equals(nombre)) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe introducir un nombre");
        } else if ("".equals(tlf)) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe introducir un teléfono");
        } else if ("".equals(email)) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe introducir un email");
        } else if ("".equals(user)) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe introducir un nombre de usuario");
        } else if ("".equals(pass)) {
            error = true;
            JOptionPane.showMessageDialog(null, "Debe introducir un password");
        }

        //si todo es correcto, creo el usuario
        if (error == false) {
            Contacto co = new Contacto();
            co.setNombre(nombre);
            co.setTelefono(tlf);
            co.setEmail(email);
            co.setUser(user);
            co.setPassword(pass);
            try {
                c.create(co);
                JOptionPane.showMessageDialog(null, "Usuario creado con éxito");
                panelAltaUsuario.setVisible(false);

                Login.setVisible(true);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error, el usuario ya existe");
            }

        }


    }//GEN-LAST:event_btnAltaActionPerformed

    private void altaNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altaNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_altaNombreActionPerformed

    private void NombreAmigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreAmigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreAmigoActionPerformed

    private void EmailAmigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailAmigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmailAmigoActionPerformed

    private void TelefonoAmigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TelefonoAmigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TelefonoAmigoActionPerformed

    private void ListaAmigosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaAmigosMouseClicked
        if ((SwingUtilities.isLeftMouseButton(evt)) && (!ListaAmigos.isSelectionEmpty())
                && (ListaAmigos.locationToIndex(evt.getPoint()) == ListaAmigos.getSelectedIndex())) {

            int selection = ListaAmigos.getSelectedIndex();

            Contacto co = modelAmigo.getAmigo(selection);

            NombreAmigo.setText(co.getNombre());
            TelefonoAmigo.setText(co.getTelefono());
            EmailAmigo.setText(co.getEmail());
            NickAmigo.setText(co.getUser());

        }
    }//GEN-LAST:event_ListaAmigosMouseClicked

    private void ListaNotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaNotasMouseClicked
        if ((SwingUtilities.isLeftMouseButton(evt)) && (!ListaNotas.isSelectionEmpty())
                && (ListaNotas.locationToIndex(evt.getPoint()) == ListaNotas.getSelectedIndex())) {

            //al pinchar en una nota, activo modificar o eliminar y apago campos
            estadoCamposNotas(true);
            BTCrearNota.setEnabled(false);
            BTEliminarNota.setEnabled(true);
            BTModificarNota.setEnabled(true);

            int selection = ListaNotas.getSelectedIndex();

            NotaSelec = modelNota.getNota(selection);

            txtnotaResumen.setText(NotaSelec.getResumen());
            txtnotatexto.setText(NotaSelec.getTexto());
            FechaNota.setDate(NotaSelec.getFecha());

        }
    }//GEN-LAST:event_ListaNotasMouseClicked

    private void BTEliminarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEliminarNotaActionPerformed

        int selection = ListaNotas.getSelectedIndex();

        if (selection > -1) {

            modelNota.eliminarNota(selection);

            try {
                n.destroy(NotaSelec.getId());
                JOptionPane.showMessageDialog(null, "Nota  eliminada con éxito.");
                //vacío los campos
                txtnotaResumen.setText("");
                txtnotatexto.setText("");
                Date d = new Date();
                FechaNota.setDate(d);
                estadoCamposNotas(false);
                BTCrearNota.setEnabled(false);
                BTEliminarNota.setEnabled(false);
                BTModificarNota.setEnabled(false);

            } catch (NonexistentEntityException ex) {
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error eliminando nota.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una nota.");
        }
    }//GEN-LAST:event_BTEliminarNotaActionPerformed

    private void EliminarAmigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarAmigoActionPerformed
        int selection = ListaAmigos.getSelectedIndex();
        if (selection > -1) {

            Contacto am = modelAmigo.getAmigo(selection);

            if (c.borrarAmigo(contLogged, am)) {
                modelAmigo.eliminarPersona(selection);
                modelPosibleAmigo.addAmigo(am);
            } else {
                JOptionPane.showMessageDialog(null, "Error eliminando amigo");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ningún amigo seleccionado");
        }

    }//GEN-LAST:event_EliminarAmigoActionPerformed

    private void ListaPosiblesAmigosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaPosiblesAmigosMouseClicked

        if ((SwingUtilities.isLeftMouseButton(evt)) && (!ListaPosiblesAmigos.isSelectionEmpty())
                && (ListaPosiblesAmigos.locationToIndex(evt.getPoint()) == ListaPosiblesAmigos.getSelectedIndex())) {

            int selection = ListaPosiblesAmigos.getSelectedIndex();

            Contacto co = modelPosibleAmigo.getAmigo(selection);

            NombreAmigo.setText(co.getNombre());
            TelefonoAmigo.setText(co.getTelefono());
            EmailAmigo.setText(co.getEmail());
            NickAmigo.setText(co.getUser());

        }
    }//GEN-LAST:event_ListaPosiblesAmigosMouseClicked

    private void NuevaNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevaNotaActionPerformed
        estadoCamposNotas(true);
        //al crear nueva nota, apago botones de eliminar y modificar, activo crear
        BTEliminarNota.setEnabled(false);
        BTCrearNota.setEnabled(true);
        BTModificarNota.setEnabled(false);
        Date dt = new Date();
        FechaNota.setDate(dt);
        txtnotaResumen.setText("");
        txtnotatexto.setText("");

    }//GEN-LAST:event_NuevaNotaActionPerformed

    private void BTModificarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarNotaActionPerformed

        //   BTModificar.setVisible(false);
        //   BTEliminar.setVisible(false);
        //CrearNota.setVisible(true);
        String resumen, texto, prioridad;

        Date FechaNota1 = FechaNota.getDate();
        resumen = txtnotaResumen.getText();
        texto = txtnotatexto.getText();
        prioridad = jCombonotaprior.getSelectedItem().toString();

        if (FechaNota1 == null) {
            JOptionPane.showMessageDialog(null, "Debe introducir una fecha válida");
        } else if (resumen.equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un título a la nota");
        } else if (prioridad.equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir una prioridad");
        } else {

            NotaSelec.setResumen(resumen);
            NotaSelec.setFecha(FechaNota1);
            NotaSelec.setContactoId(contLogged);
            NotaSelec.setImportancia(prioridad);
            NotaSelec.setTexto(texto);

            try {
                n.edit(NotaSelec);
                JOptionPane.showMessageDialog(null, "Nota modificada con éxito");

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error modificando nota");
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_BTModificarNotaActionPerformed

    private void BTModificarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarDatosActionPerformed
        if (Nombre.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un nombre");
        } else if (Telefono.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un teléfono");
        } else if (Email.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un e-mail");
        } else if (Nick.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un nick");
        } else if (String.copyValueOf(loginpassword.getPassword()).equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir una contraseña");
        } else {
            contLogged.setNombre(Nombre.getText());
            contLogged.setTelefono(Telefono.getText());
            contLogged.setEmail(Email.getText());
            contLogged.setUser(Nick.getText());
            contLogged.setPassword(String.copyValueOf(loginpassword.getPassword()));

            try {
                c.edit(contLogged);
                JOptionPane.showMessageDialog(null, "Datos modificados con éxito");
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error, el nick ya existe");
            }
        }
    }//GEN-LAST:event_BTModificarDatosActionPerformed

    private void BTEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEliminarActionPerformed

        int selection = ListaPropios.getSelectedIndex();

        if (selection > -1) {

            Evento ev = modelEventoPropio.getEvento(selection);

            for (ContactoHasEvento cev : ev.getContactoHasEventoCollection()) {
                try {

                    ce.destroy(cev.getContactoHasEventoPK());

                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            try {

                e.destroy(ev.getId());

                modelEventoPropio.eliminarEvento(selection);

                JOptionPane.showMessageDialog(null, "Evento eliminado con éxito.");
                //vacio los campos
                TituloEvento.setText("");
                Date d = new Date();
                jDateChooser1.setDate(d);
                jDateChooser2.setDate(d);
                DescripcionEvento.setText("");

                modelInvitado = new ListModelAmigo();
                ListInvitados.setModel(modelInvitado);
                estadoCamposEventos(false);
                BTEliminar.setEnabled(false);
                BTCrear.setEnabled(false);
                BTModificar.setEnabled(false);
                LabelAsistentes.setVisible(false);
                Asistentes.setText("");
            } catch (IllegalOrphanException | NonexistentEntityException ex) {
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error eliminando Evento.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un evento.");
        }
    }//GEN-LAST:event_BTEliminarActionPerformed

    private void BTModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarActionPerformed
        // estadoCamposEventos(true);

        if (TituloEvento.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un título");
        } else if (jDateChooser1.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Debe introducir una fecha de inicio válida");
        } else if (jDateChooser2.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Debe introducir una fecha de fin válida");
        } else if (comboLugar.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un lugar");
        } else if (DescripcionEvento.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir una descripción");
        } else {
            EventoSelec.setTitulo(TituloEvento.getText());
            EventoSelec.setInicio(jDateChooser1.getDate());
            EventoSelec.setFinaliza(jDateChooser2.getDate());
            EventoSelec.setDescripcion(DescripcionEvento.getText());
            EventoSelec.setLugarId((Lugar) comboLugar.getSelectedItem());

            int[] indices = ListPosiblesInvitados.getSelectedIndices();

            //recorro lista de invitados para ir añadiendo a contactoHasEvento
            for (int i : indices) {

                Contacto co = modelPosibleInvitado.getAmigo(i);

                ContactoHasEventoPK cepk = new ContactoHasEventoPK();
                cepk.setContactoId(co.getId());
                cepk.setEventoId(EventoSelec.getId());
                ContactoHasEvento cv = new ContactoHasEvento();
                cv.setContactoHasEventoPK(cepk);
                cv.setContacto(co);
                cv.setEvento(EventoSelec);
                cv.setAcude(0);
                EventoSelec.getContactoHasEventoCollection().add(cv);
                try {
                    ce.create(cv);
                } catch (Exception ex) {
                    Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                modelInvitado.addAmigo(co);
            }

            //elimino los usuarios ya invitados
            for (ContactoHasEvento cohe : EventoSelec.getContactoHasEventoCollection()) {
                Contacto co = cohe.getContacto();
                for (int j = 0; j < modelPosibleInvitado.getSize(); j++) {

                    Contacto con = modelPosibleInvitado.getAmigo(j);

                    if (co.equals(con)) {
                        modelPosibleInvitado.eliminarPersona(j);

                    }
                }
            }

            try {
                e.edit(EventoSelec);
                JOptionPane.showMessageDialog(null, "Modificación realizada con éxito");
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error modificando evento");
            } catch (Exception ex) {
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error modificando evento");
            }

        }
    }//GEN-LAST:event_BTModificarActionPerformed

    private void BTCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTCrearActionPerformed

        EventoSelec = new Evento();
        if (TituloEvento.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir un título");
        } else if (jDateChooser1.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Debe introducir una fecha de inicio válida");
        } else if (jDateChooser2.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Debe introducir una fecha de fin válida");
        } else if (comboLugar.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un lugar");
        } else if (DescripcionEvento.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe introducir una descripción");
        } else {//creo el evento
            EventoSelec.setTitulo(TituloEvento.getText());
            EventoSelec.setInicio(jDateChooser1.getDate());
            EventoSelec.setFinaliza(jDateChooser2.getDate());
            EventoSelec.setDescripcion(DescripcionEvento.getText());
            EventoSelec.setLugarId((Lugar) comboLugar.getSelectedItem());
            EventoSelec.setContactoId(contLogged);

            try {
                e.create(EventoSelec);

                //almaceno la lista de invitados
                int[] indices = ListPosiblesInvitados.getSelectedIndices();

                //recorro lista de invitados para ir añadiendo a contactoHasEvento
                for (int i : indices) {

                    Contacto co = modelPosibleInvitado.getAmigo(i);

                    ContactoHasEventoPK cepk = new ContactoHasEventoPK();
                    cepk.setContactoId(co.getId());
                    cepk.setEventoId(EventoSelec.getId());
                    ContactoHasEvento cv = new ContactoHasEvento();
                    cv.setContactoHasEventoPK(cepk);
                    cv.setContacto(co);
                    cv.setEvento(EventoSelec);
                    cv.setAcude(0);
                    EventoSelec.getContactoHasEventoCollection().add(cv);
                    ce.create(cv);
                    modelInvitado.addAmigo(co);
                }

                e.edit(EventoSelec);

                //elimino los usuarios ya invitados
                for (ContactoHasEvento cohe : EventoSelec.getContactoHasEventoCollection()) {

                    Contacto co = cohe.getContacto();

                    for (int j = 0; j < modelPosibleInvitado.getSize(); j++) {

                        Contacto con = modelPosibleInvitado.getAmigo(j);

                        if (co.equals(con)) {
                            modelPosibleInvitado.eliminarPersona(j);

                        }
                    }
                }
                modelEventoPropio.addEvento(EventoSelec);

                JOptionPane.showMessageDialog(null, "Evento creado con éxito.");
                //al crear nuevo, limpio los campos para dejarlo así luego
                TituloEvento.setText("");
                Date d = new Date();
                jDateChooser1.setDate(d);
                jDateChooser2.setDate(d);
                DescripcionEvento.setText("");

                estadoCamposEventos(false);
                BTEliminar.setEnabled(false);
                BTCrear.setEnabled(false);
                BTModificar.setEnabled(false);

            } catch (Exception ex) {
                Logger.getLogger(EventosPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error creando evento.");
            }

        }
    }//GEN-LAST:event_BTCrearActionPerformed

    private void BTNNuevoLugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNNuevoLugarActionPerformed
        panelNuevoLugar.setVisible(true);
    }//GEN-LAST:event_BTNNuevoLugarActionPerformed

    private void ListaInvitadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaInvitadoMouseClicked
        //habilitar campos, modificar botones

        if ((SwingUtilities.isLeftMouseButton(evt)) && (!ListaInvitado.isSelectionEmpty())
                && (ListaInvitado.locationToIndex(evt.getPoint()) == ListaInvitado.getSelectedIndex())) {
            estadoCamposEventos(false);
            LabelAsistentes.setVisible(false);
            Asistentes.setText("");
            CBAsistir.setEnabled(true);
            BTEliminar.setEnabled(false);
            BTModificar.setEnabled(false);
            BTCrear.setEnabled(false);

            int selection = ListaInvitado.getSelectedIndex();

            EventoSelec = modelEventoInvitado.getEvento(selection);

            TituloEvento.setText(EventoSelec.getTitulo());
            DescripcionEvento.setText(EventoSelec.getDescripcion());
            jDateChooser1.setDate(EventoSelec.getInicio());
            jDateChooser2.setDate(EventoSelec.getFinaliza());
            comboLugar.setSelectedItem(EventoSelec);
            ContactoHasEventoPK cepk = new ContactoHasEventoPK();
            cepk.setContactoId(contLogged.getId());
            cepk.setEventoId(EventoSelec.getId());

            ContactoHasEvento cev = ce.findContactoHasEvento(cepk);
            if (cev.getAcude() == 1) {
                CBAsistir.setSelected(true);
            }

        }
    }//GEN-LAST:event_ListaInvitadoMouseClicked

    private void ListaPropiosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaPropiosMouseClicked
        //habilitar campos, modificar botones

        if ((SwingUtilities.isLeftMouseButton(evt)) && (!ListaPropios.isSelectionEmpty())
                && (ListaPropios.locationToIndex(evt.getPoint()) == ListaPropios.getSelectedIndex())) {
            estadoCamposEventos(true);
            BTEliminar.setEnabled(true);
            BTModificar.setEnabled(true);
            BTCrear.setEnabled(false);
            int selection = ListaPropios.getSelectedIndex();

            EventoSelec = modelEventoPropio.getEvento(selection);

            Query q = em.createNamedQuery("ContactoHasEvento.findByAcude");
            q.setParameter("acude", 1);
            q.setParameter("eventoId", EventoSelec.getId());

            LabelAsistentes.setVisible(true);
            Asistentes.setText(q.getResultList().get(0).toString());

            TituloEvento.setText(EventoSelec.getTitulo());
            DescripcionEvento.setText(EventoSelec.getDescripcion());
            jDateChooser1.setDate(EventoSelec.getInicio());
            jDateChooser2.setDate(EventoSelec.getFinaliza());
            comboLugar.setSelectedItem(EventoSelec.getLugarId());
            //Relleno los posibles invitados a eventos con mis amigos
            modelPosibleInvitado = new ListModelAmigo();
            ListPosiblesInvitados.setModel(modelPosibleInvitado);
            modelInvitado = new ListModelAmigo();
            ListInvitados.setModel(modelInvitado);

            for (int i = 0; i < modelAmigo.getSize(); i++) {
                Contacto cont = modelAmigo.getAmigo(i);
                modelPosibleInvitado.addAmigo(cont);
            }

            //Con esto elimino de la lista de posibles invitados a los ya invitados y a mí mismo.
            for (ContactoHasEvento cohe : EventoSelec.getContactoHasEventoCollection()) {
                Contacto co = cohe.getContacto();
                modelInvitado.addAmigo(co);
                for (int j = 0; j < modelPosibleInvitado.getSize(); j++) {

                    Contacto con = modelPosibleInvitado.getAmigo(j);

                    if ((co.equals(con)) || (co.equals(contLogged))) {
                        modelPosibleInvitado.eliminarPersona(j);

                    }
                }
            }
            //-------------------------------------------------------
        }
    }//GEN-LAST:event_ListaPropiosMouseClicked

    private void NuevoEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoEventoActionPerformed
        estadoCamposEventos(true);

        Date dt = new Date();
        jDateChooser1.setDate(dt);
        jDateChooser2.setDate(dt);

        modelInvitado = new ListModelAmigo();
        ListInvitados.setModel(modelInvitado);

        DescripcionEvento.setText("");
        TituloEvento.setText("");
        BTModificar.setEnabled(false);
        BTEliminar.setEnabled(false);
        BTCrear.setEnabled(true);
        CBAsistir.setEnabled(false);
        LabelAsistentes.setVisible(false);
        Asistentes.setText("");
        //quitar la seleccion del jlist de la derecha
        ListPosiblesInvitados.clearSelection();
        for (int i = 0; i < modelAmigo.getSize(); i++) {
            Contacto cont = modelAmigo.getAmigo(i);
            modelPosibleInvitado.addAmigo(cont);
        }

    }//GEN-LAST:event_NuevoEventoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Asistentes;
    private javax.swing.JButton BTCrear;
    private javax.swing.JButton BTCrearNota;
    private javax.swing.JButton BTEliminar;
    private javax.swing.JButton BTEliminarNota;
    private javax.swing.JButton BTModificar;
    private javax.swing.JButton BTModificarDatos;
    private javax.swing.JButton BTModificarNota;
    private javax.swing.JButton BTNNuevoLugar;
    private javax.swing.JCheckBox CBAsistir;
    private javax.swing.JTextArea DescripcionEvento;
    private javax.swing.JButton EliminarAmigo;
    private javax.swing.JTextField Email;
    private javax.swing.JTextField EmailAmigo;
    private com.toedter.calendar.JDateChooser FechaNota;
    private javax.swing.JLabel LabelAsistentes;
    private javax.swing.JList ListInvitados;
    private javax.swing.JList ListPosiblesInvitados;
    private javax.swing.JList ListaAmigos;
    private javax.swing.JList ListaInvitado;
    private javax.swing.JList ListaNotas;
    private javax.swing.JList ListaPosiblesAmigos;
    private javax.swing.JList ListaPropios;
    public javax.swing.JDialog Login;
    private javax.swing.JTextField Nick;
    private javax.swing.JTextField NickAmigo;
    private javax.swing.JTextField Nombre;
    private javax.swing.JTextField NombreAmigo;
    private javax.swing.JButton NuevaNota;
    private javax.swing.JButton NuevoAmigo;
    private javax.swing.JButton NuevoEvento;
    private javax.swing.JPasswordField Password;
    private javax.swing.JTextField Telefono;
    private javax.swing.JTextField TelefonoAmigo;
    private javax.swing.JTextField TituloEvento;
    private javax.swing.JTextField altaEmail;
    private javax.swing.JTextField altaNombre;
    private javax.swing.JPasswordField altaPass;
    private javax.swing.JTextField altaTel;
    private javax.swing.JTextField altaUser;
    private javax.swing.JButton btnAlta;
    private javax.swing.JButton btnCancelarNuevaBase5;
    private javax.swing.JButton btnLogin;
    private javax.swing.JComboBox comboLugar;
    private javax.swing.JComboBox jCombonotaprior;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTextField loginUsuario;
    private javax.swing.JPasswordField loginpassword;
    private javax.swing.JLabel muestraNombre;
    private javax.swing.JTextField nuevoCP;
    private javax.swing.JTextField nuevoLugarCalle;
    public javax.swing.JDialog panelAltaUsuario;
    public javax.swing.JDialog panelNuevoLugar;
    private javax.swing.JPanel pestanyaAmigos;
    private javax.swing.JPanel pestanyaDatosPers;
    private javax.swing.JPanel pestanyaEventos;
    private javax.swing.JPanel pestanyaNotas;
    public static javax.swing.JTextField txtCP;
    private javax.swing.JTextField txtnotaResumen;
    private javax.swing.JTextArea txtnotatexto;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the usuarioInsertado
     */
    public String getUsuarioInsertado() {
        return usuarioInsertado;
    }

    /**
     * @return the passwordInsertado
     */
    public String getPasswordInsertado() {
        return passwordInsertado;
    }

}

class MyItemListener implements ItemListener {

    // This method is called only if a new item has been selected.
    public void itemStateChanged(ItemEvent evt) {
        JComboBox cb = (JComboBox) evt.getSource();

        Object item = evt.getItem();

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Lugar L = (Lugar) cb.getSelectedItem();
            EventosPanel.txtCP.setText(L.getCodpost());
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            // Item is no longer selected
        }
    }
}
